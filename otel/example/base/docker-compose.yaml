# This file is created by reference from
# 1. https://github.com/jaegertracing/jaeger/tree/main/docker-compose/monitor
# 2. https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector

x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"
    tag: "{{.Name}}"

# version: "3.7"
services:
  # NOTE: change the service name if you copy-paste
  # Generate fake traces...
  # k6-tracing:
  #   image: ghcr.io/grafana/xk6-client-tracing:v0.0.2
  #   environment:
  #     - ENDPOINT=otel_collector:4317
  #   restart: always
  #   depends_on:
  #     - otel_collector

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    image: &tempoImage grafana/tempo:${TEMPO_TAG:-2.8.1}
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ../../data/tempo:/var/tempo

  tempo:
    image: *tempoImage
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ../../src/tempo/tempo-local.yaml:/etc/tempo.yaml
      - ../../data/tempo:/var/tempo
    ports:
      - "3200:3200" # tempo
      - "4317:4317" # otlp grpc
      - "4318:4318" # otlp http
    depends_on:
      - init

  loki:
    image: grafana/loki:${LOKI_TAG:-3.5.1}
    restart: always
    ports:
      - 3100:3100/tcp
    volumes:
      - ../../src/loki/loki.yaml:/etc/loki/local-config.yaml
      - ../../data/loki:/loki

  prometheus:
    image: prom/prometheus:${PROMETHEUS_TAG:-v3.4.1}
    command:
      - --config.file=/etc/prometheus.yml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
      - --web.enable-lifecycle
    volumes:
      - "../../src/prometheus/prometheus.yml:/etc/prometheus.yml"
      - "../../src/prometheus/targets.json:/etc/targets.json"
      - "../../data/prometheus:/prometheus"
      - ~/.aws:/home/.aws # for AWS credentials
    # environment:
    #   - AWS_ACCESS_KEY_ID
    #   - AWS_SECRET_ACCESS_KEY
    ports:
      - "9090:9090"

  minio:
    image: minio/minio:${MINIO_TAG:-RELEASE.2024-12-13T22-06-05Z}
    command: ["server", "/data", "--console-address", ":9001"]
    environment:
      - MINIO_ACCESS_KEY=pyroscope
      - MINIO_SECRET_KEY=supersecret
      - MINIO_ROOT_USER=pyroscope
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ../../data/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-init:
    image: minio/mc:${MINIO_MC_TAG:-RELEASE.2024-12-13T17-44-15Z}
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 pyroscope supersecret;
      mc mb --ignore-existing minio/pyroscope;
      exit 0;
      "

  pyroscope:
    image: grafana/pyroscope:${PYROSCOPE_TAG:-1.9.1}
    volumes:
      - ../../src/pyroscope/pyroscope.yaml:/etc/pyroscope/config.yaml
      - ../../data/pyroscope:/data/pyroscope
    command:
      - -config.file=/etc/pyroscope/config.yaml
      - -log.level=info
    ports:
      - "4040:4040"
    depends_on:
      - minio-init
    environment:
      - PYROSCOPE_LOG_LEVEL=info

  grafana:
    image: grafana/grafana:${GRAFANA_TAG:-12.0.1}
    volumes:
      - ../../src/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ../../src/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ../../src/grafana/dashboards/:/etc/grafana/provisioning/dashboards
      - ../../src/grafana/grafana-plugins:/var/lib/grafana/plugins
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      # - GF_FEATURE_TOGGLES_ENABLE=tempoSearch tempoBackendSearch tempoServiceGraph dashgpt
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor metricsSummary logsExploreTableVisualisation
      # - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-exploretraces-app/grafana-exploretraces-app-latest.zip;grafana-traces-app
      - GF_INSTALL_PLUGINS=raintank-worldping-app,grafana-googlesheets-datasource,grafana-athena-datasource,grafana-amazonprometheus-datasource,grafana-exploretraces-app,grafana-investigations-app,grafana-llm-app,grafana-synthetic-monitoring-app,grafana-advisor-app
    ports:
      - 3000:3000
    depends_on:
      - pyroscope
